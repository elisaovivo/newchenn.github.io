<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Pop Sequence</title>
    <url>/2020/05/28/Pop-Sequence/</url>
    <content><![CDATA[<p>Given a stack which can keep <em>M</em> numbers at most. Push <em>N</em> numbers in the order of 1, 2, 3, …, <em>N</em> and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. For example, if <em>M</em> is 5 and <em>N</em> is 7, we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, but not 3, 2, 1, 7, 5, 6, 4.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 3 numbers (all no more than 1000): <em>M</em> (the maximum capacity of the stack), <em>N</em> (the length of push sequence), and <em>K</em> (the number of pop sequences to be checked). Then <em>K</em> lines follow, each contains a pop sequence of <em>N</em> numbers. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each pop sequence, print in one line “YES” if it is indeed a possible pop sequence of the stack, or “NO” if not.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 7 5</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">3 2 1 7 5 6 4</span><br><span class="line">7 6 5 4 3 2 1</span><br><span class="line">5 6 4 3 7 2 1</span><br><span class="line">1 7 6 5 4 3 2</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805427332562944" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int M,N,K;</span><br><span class="line">int main()&#123;</span><br><span class="line">	cin&gt;&gt;M&gt;&gt;N&gt;&gt;K;</span><br><span class="line">	vector&lt;int&gt; v(N+1);</span><br><span class="line">	while(K--)&#123;</span><br><span class="line">		stack&lt;int&gt; s;</span><br><span class="line">		for(int i &#x3D; 1;i &lt;&#x3D; N;i++)</span><br><span class="line">			cin&gt;&gt;v[i];</span><br><span class="line">		int current &#x3D; 1;</span><br><span class="line">		for(int i &#x3D; 1;i &lt;&#x3D; N;i++)&#123;</span><br><span class="line">			s.push(i);</span><br><span class="line">			if(s.size()&gt;M) break;</span><br><span class="line">			while(!s.empty()&amp;&amp;s.top()&#x3D;&#x3D;v[current])&#123;</span><br><span class="line">				s.pop();</span><br><span class="line">				current++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if(current &#x3D;&#x3D; N+1) cout&lt;&lt;&quot;YES\n&quot;;</span><br><span class="line">		else cout&lt;&lt;&quot;NO\n&quot;;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>current确定当前扫描到第几个位置。</p>
<p>栈只需要从1顺序进，每进一个就while循环，判断栈顶和current当前位置，只要对上了，current往后走，栈不停弹出。</p>
<p>判断成功的方法：current最后到了N+1，也就是前面都通过检验。</p>
<p>这里就相当于一个证明题：对于一个命题，错与对哪个好证明，就证明哪个，最后用反证法。</p>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>Reversing Linked List</title>
    <url>/2020/05/28/Reversing-Linked-List/</url>
    <content><![CDATA[<p>Given a constant <em>K</em> and a singly linked list <em>L</em>, you are supposed to reverse the links of every <em>K</em> elements on <em>L</em>. For example, given <em>L</em> being 1→2→3→4→5→6, if <em>K</em>=3, then you must output 3→2→1→6→5→4; if <em>K</em>=4, you must output 4→3→2→1→5→6.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains the address of the first node, a positive <em>N</em> (≤105) which is the total number of nodes, and a positive <em>K</em> (≤<em>N</em>) which is the length of the sublist to be reversed. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.</p>
<p>Then <em>N</em> lines follow, each describes a node in the format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Address Data Next</span><br></pre></td></tr></table></figure>

<p>where <code>Address</code> is the position of the node, <code>Data</code> is an integer, and <code>Next</code> is the position of the next node.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00100 6 4</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 -1</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000 4 33218</span><br><span class="line">33218 3 12309</span><br><span class="line">12309 2 00100</span><br><span class="line">00100 1 99999</span><br><span class="line">99999 5 68237</span><br><span class="line">68237 6 -1</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/1211841066264109056/problems/1231458941036285954" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int temp,data[100005],nex[100005],lis[100005],ans[100005];</span><br><span class="line">int main()&#123;</span><br><span class="line">	int first,k,n,sum &#x3D; 0;</span><br><span class="line">	</span><br><span class="line">	cin&gt;&gt;first&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	for(int i &#x3D; 0;i&lt;n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;temp;</span><br><span class="line">		cin&gt;&gt;data[temp]&gt;&gt;nex[temp];</span><br><span class="line">	&#125;</span><br><span class="line">	while(first!&#x3D;-1)&#123;</span><br><span class="line">		lis[sum++] &#x3D; first;</span><br><span class="line">		first &#x3D; nex[first];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	for(int i &#x3D; 0;i&lt;sum;i++) ans[i] &#x3D; lis[i];</span><br><span class="line">	for(int i &#x3D; 0;i&lt;(sum-sum%k);i++)&#123;&#x2F;&#x2F;反转范围为前k的整数倍,后面剩余部分不动</span><br><span class="line">		ans[i] &#x3D; lis[i&#x2F;k*k+k-1-i%k];&#x2F;&#x2F;i&#x2F;k*k确定第几组反转的起步位置，k-1-i%k控制组内的顺序移动</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i &#x3D; 0;i&lt;sum-1;i++)</span><br><span class="line">		printf(&quot;%05d %d %05d\n&quot;,ans[i],data[ans[i]],ans[i+1]);</span><br><span class="line">	printf(&quot;%05d %d -1\n&quot;,ans[sum-1],data[ans[sum-1]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里采用数组模拟链表</p>
<p>对于节点元素：value,next；</p>
<p>分别用两个数组模拟,数组下标为节点地址，只要有节点地址，就能通过访问两个数组获取相应的值；</p>
<p>对于翻转，只要关注节点排列的顺序就行了。</p>
<p>lis数组存储链表上节点的顺序依次地址。</p>
<p>ans来存储lis按照一定k值重写排列的地址。</p>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title>一元多项式的乘法与加法运算</title>
    <url>/2020/05/28/%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E4%B9%98%E6%B3%95%E4%B8%8E%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p>设计函数分别求两个一元多项式的乘积与和。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出<code>0 0</code>。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 3 4 -5 2  6 1  -2 0</span><br><span class="line">3 5 20  -7 4  3 1</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 1</span><br><span class="line">5 20 -4 4 -5 2 9 1 -2 0</span><br></pre></td></tr></table></figure>



<p><a href="https://pintia.cn/problem-sets/434/problems/5865" target="_blank" rel="noopener">链接</a></p>
<p>解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct node&#123;</span><br><span class="line">	int co;</span><br><span class="line">	int ex;</span><br><span class="line">	node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void attach(node** rear,int a,int b)&#123;</span><br><span class="line">	node* temp &#x3D; (node*)malloc(sizeof(node));</span><br><span class="line">	temp-&gt;co &#x3D; a;</span><br><span class="line">	temp-&gt;ex &#x3D; b;</span><br><span class="line">	temp-&gt;next &#x3D; NULL;</span><br><span class="line">	(*rear)-&gt;next &#x3D; temp;</span><br><span class="line">	(*rear) &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line">node* read()&#123;</span><br><span class="line">	int c;</span><br><span class="line">	cin&gt;&gt;c;</span><br><span class="line">	node* p &#x3D; (node*)malloc(sizeof(node));</span><br><span class="line">	p-&gt;next &#x3D; NULL;</span><br><span class="line">	node* rear &#x3D; p;</span><br><span class="line">	while(c--)&#123;</span><br><span class="line">		int a,b;</span><br><span class="line">		cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		attach(&amp;rear,a,b);</span><br><span class="line">	&#125;</span><br><span class="line">	node* t &#x3D; p-&gt;next;</span><br><span class="line">	free(p);</span><br><span class="line">	return t;</span><br><span class="line">&#125;</span><br><span class="line">node* plu(node* a,node* b)&#123;</span><br><span class="line">	node* p &#x3D; (node*)malloc(sizeof(node));</span><br><span class="line">	node* rear &#x3D; p;</span><br><span class="line">	p-&gt;next &#x3D; NULL;</span><br><span class="line">	while(a&amp;&amp;b)&#123;</span><br><span class="line">		if(a-&gt;ex&gt;b-&gt;ex)&#123;</span><br><span class="line">			attach(&amp;rear,a-&gt;co,a-&gt;ex);</span><br><span class="line">			a &#x3D; a-&gt;next;</span><br><span class="line">		&#125;else if(a-&gt;ex&lt;b-&gt;ex)&#123;</span><br><span class="line">			attach(&amp;rear,b-&gt;co,b-&gt;ex);</span><br><span class="line">			b &#x3D; b-&gt;next;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			if(a-&gt;co+b-&gt;co !&#x3D; 0)&#123;</span><br><span class="line">				attach(&amp;rear,a-&gt;co+b-&gt;co,a-&gt;ex);	</span><br><span class="line">			&#125; </span><br><span class="line">			a &#x3D; a-&gt;next;</span><br><span class="line">			b &#x3D; b-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	while(a)&#123;</span><br><span class="line">		attach(&amp;rear,a-&gt;co,a-&gt;ex);</span><br><span class="line">		a &#x3D; a-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	while(b)&#123;</span><br><span class="line">		attach(&amp;rear,b-&gt;co,b-&gt;ex);</span><br><span class="line">		b &#x3D; b-&gt;next; </span><br><span class="line">	&#125; </span><br><span class="line">	node* t &#x3D; p-&gt;next;</span><br><span class="line">	free(p);</span><br><span class="line">	return t;</span><br><span class="line">&#125;</span><br><span class="line">void print(node* a)&#123;</span><br><span class="line">	if(!a) printf(&quot;0 0&quot;);</span><br><span class="line">	else&#123;</span><br><span class="line">		bool flag &#x3D; false;</span><br><span class="line">		while(a)&#123;</span><br><span class="line">			if(!flag)&#123;</span><br><span class="line">				cout&lt;&lt;a-&gt;co&lt;&lt;&quot; &quot;&lt;&lt;a-&gt;ex;</span><br><span class="line">				flag &#x3D; true;</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				cout&lt;&lt;&quot; &quot;&lt;&lt;a-&gt;co&lt;&lt;&quot; &quot;&lt;&lt;a-&gt;ex;</span><br><span class="line">			&#125;</span><br><span class="line">			a &#x3D; a-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">node* muti(node* a,node* b)&#123;</span><br><span class="line">	node* p &#x3D; NULL;</span><br><span class="line">	if(!a||!b) return NULL;</span><br><span class="line">	while(a)&#123;</span><br><span class="line">		node* temp &#x3D; (node*)malloc(sizeof(node));</span><br><span class="line">		temp-&gt;next &#x3D; NULL;</span><br><span class="line">		node* bp &#x3D; b;</span><br><span class="line">		node* rear &#x3D; temp; </span><br><span class="line">		while(bp)&#123;</span><br><span class="line">			attach(&amp;rear,a-&gt;co*bp-&gt;co,a-&gt;ex+bp-&gt;ex);</span><br><span class="line">			bp &#x3D; bp-&gt;next;</span><br><span class="line">		&#125; </span><br><span class="line">		node* t &#x3D; temp-&gt;next;</span><br><span class="line">		free(temp);</span><br><span class="line">		p &#x3D; plu(p,t);</span><br><span class="line">		a &#x3D; a-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	return p;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">	node* a &#x3D; read();</span><br><span class="line">	node* b &#x3D; read();</span><br><span class="line">	node* c &#x3D; muti(a,b);</span><br><span class="line">	print(c);</span><br><span class="line">	cout&lt;&lt;&quot;\n&quot;;</span><br><span class="line">	c &#x3D; plu(a,b);</span><br><span class="line">	print(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>1、在用malloc创建节点时，不要忘了对里面的指针初始化。</p>
<p>2、attach函数参数为node**，这是指针的指针，目的是更改指向节点的指针的值（需要不断更改rear的位置）</p>
<p>node** a（b的内存地址）</p>
<p>-&gt;node* b(c的内存地址)</p>
<p>-&gt;node c</p>
<p>更改c的属性值： b-&gt;value = xxx;（*a）-&gt;value = xxx;</p>
<p>更改b的值： (*a) = xxx;</p>
<p>3、注意代码的可重用性，这里的乘法就可以用到加法。</p>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title>Maximum Subsequence Sum</title>
    <url>/2020/05/26/Maximum-Subsequence-Sum/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/1211841066264109056/problems/1211848231062290433" target="_blank" rel="noopener">链接</a></p>
<p>Given a sequence of <em>K</em> integers { <em>N</em>1, <em>N</em>2, …, <em>N**K</em> }. A continuous subsequence is defined to be { <em>N**i</em>, <em>N**i</em>+1, …, <em>N**j</em> } where 1≤<em>i</em>≤<em>j</em>≤<em>K</em>. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>
<p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer <em>K</em> (≤10000). The second line contains <em>K</em> numbers, separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices <em>i</em> and <em>j</em> (as shown by the sample case). If all the <em>K</em> numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">-10 1 2 3 4 -5 -23 3 7 -21</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 1 4</span><br></pre></td></tr></table></figure>



<p>解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int k,arr[100000];</span><br><span class="line">int cmax,rmax &#x3D; -1;</span><br><span class="line">int l,r,temp;</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    </span><br><span class="line">    for(int i &#x3D; 0;i&lt;k;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 0;i&lt;k;i++)&#123;</span><br><span class="line">        cmax+&#x3D;arr[i];</span><br><span class="line">        if(rmax&lt;cmax)&#123;</span><br><span class="line">            r &#x3D; i;</span><br><span class="line">            l &#x3D; temp;</span><br><span class="line">            rmax &#x3D; cmax;</span><br><span class="line">        &#125;</span><br><span class="line">        if(cmax&lt;0)&#123;</span><br><span class="line">            cmax &#x3D; 0;</span><br><span class="line">            temp &#x3D; i+1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(rmax &lt; 0 )</span><br><span class="line">        cout &lt;&lt;0&lt;&lt;&quot; &quot;&lt;&lt;arr[0]&lt;&lt;&quot; &quot;&lt;&lt;arr[k-1];</span><br><span class="line">    else</span><br><span class="line">        cout&lt;&lt; rmax&lt;&lt;&quot; &quot;&lt;&lt;arr[l]&lt;&lt;&quot; &quot;&lt;&lt;arr[r];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1、设置左边界的时机，需要通过temp临时存储，当cmax&lt;0,可以肯定的是左边界在后面一个，但此时不能直接修改l，例如：3 -4 -5，直接修改会产生错误。所以需要在cmax&gt;rmax时修改。</p>
<p>2、rmax初值需要设置为负数，如果默认0，例如 0,0,0,0。结果会输出第一个和最后一个，导致错误。</p>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>线性表</tag>
        <tag>动态规划，最⼤大连续⼦子序列列和</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.5.13</title>
    <url>/2020/05/13/2020-5-13/</url>
    <content><![CDATA[<hr>
<a id="more"></a>

]]></content>
      <categories>
        <category>生活日常</category>
      </categories>
  </entry>
  <entry>
    <title>王阳明心学及其现代意义</title>
    <url>/2020/05/09/%E7%8E%8B%E9%98%B3%E6%98%8E%E5%BF%83%E5%AD%A6%E5%8F%8A%E5%85%B6%E7%8E%B0%E4%BB%A3%E6%84%8F%E4%B9%89/</url>
    <content><![CDATA[<p>王阳明心学就是中国人生哲学的最高成果。</p>
<p>在自己的成长过程中形成自己的精神家园。</p>
<p>安心立命。</p>
<p>人生富贵穷通，莫非命也。</p>
<p>生活的阅历积累道一定程度，每个人都有自己的命。</p>
<p>出生于怎样家庭，怎样父母成了我，这些事情不容我选择。</p>
<p>孟子说：人生总要有所求</p>
<p>求有两种：</p>
<p>求则得之，舍则失之；是求有益于得也，求在我者也。</p>
<p>求之有道，得之有命，是求无益于得也，求在外者也。</p>
<p>为何要重温阳明心学？</p>
<p>今日之中国，重欲汹汹，各种的欲望。</p>
<p>改革开放30年，中华名族形成这样一个民风：各释其能，各谋其力，纷争交给法律，前途交给偶然。</p>
<p>当然这无可厚非。</p>
<p>但这民风伴随重功利，清道义。名族将内不能安，外不能立。</p>
<p>GDP增长极快，有大量资本。一个名族不能因为货币，成为一个名族安身立命之根本。</p>
<p>社会信任的普遍危机是当代中国最基本的品质。</p>
<p>什么是心？</p>
<p>烦恼来自于心</p>
<p>能生出烦恼的心最难对付。</p>
<p>孔子论语中说：“不仁者（心没有安顿的人），不可以久处约（贫贱的生活处境），不可以长处乐（富贵的生活环境）。</p>
<p>我们有无限心，人在每一个瞬间筹划着未来，这是我们心得无限面，心超越事实，在筹划不存在的未来。烦恼与精彩都从中来。</p>
<p>无限心无法安顿在有限事物上。</p>
<p>如何安顿?</p>
<p>第一步 处世（超越现实世界）</p>
<p>第二步 入世</p>
<p>以出世的精神做入世的事情</p>
<p>中国哲学的境界有三条出世的路</p>
<p>儒：无所为而为</p>
<p>没有失败的人生，做一件事情就为了自己的价值</p>
<p>知己不可为而为之。</p>
<p>道：无为而无不为</p>
<p>人的幸福来自天，苦恼来自自己。</p>
<p>不为：不造作的事情</p>
<p>为道日损，损之又损。</p>
<p>生非贵之，所能存。生非爱之，所能厚。</p>
<p>了解天道，就是减去人为的东西。顺应去做。</p>
<p>做减法的方法在老庄的著作里。</p>
<p>佛家：无心而为</p>
<p>认真做，不求结果，除人心，不除事。</p>
<p>中国哲学就是人生哲学，如何安排最难安排的生命?</p>
<p>欧洲基督教</p>
<p>阿拉伯伊斯兰教</p>
<p>这些地区的出世路为宗教</p>
<p>生有涯，知无涯，以有涯随无涯，殆己！</p>
<p>什么是心学?</p>
<p>孟子：善端（根源）</p>
<p>孔子论道为仁</p>
<p>荀子：生物来自本能，人生来就恶。</p>
<p>孟子：避免利益纠纷而有道德，避免社会解体。</p>
<p>荀子认为智力高于动物，人发明道德。</p>
<p>孟子认为道德来自于心</p>
<p>恻隐</p>
<p>羞恶</p>
<p>辞让</p>
<p>是非</p>
<p>heart 生物学</p>
<p>mind 心理学</p>
<p>GEMUTE</p>
<p>良知乃是天理昭明灵觉处，故良知即是天理。</p>
<p>“心即理”（阳明学第一命题）</p>
<p>万物皆备于我，反心而诚善莫大焉。</p>
]]></content>
      <categories>
        <category>哲学</category>
      </categories>
      <tags>
        <tag>哲学，王德峰</tag>
      </tags>
  </entry>
  <entry>
    <title>哲学导论第5课</title>
    <url>/2020/05/03/%E5%93%B2%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%AC5%E8%AF%BE/</url>
    <content><![CDATA[<p>一个名族的思想境界如果不能提升，就没办法寻找真理，理解面临困境的根源。</p>
<p>哲学上的自由，是一种能力来终止自然规律在我们身上的作用。</p>
<p>荀子试图对道德现象作科学的解释。</p>
<p>法律的前提，每个人都有责任能力，责任能力对自然规律有一种超越的能力（超越生物性），这种认定必须是形而上学的假定。</p>
<p>理性有两种含义：</p>
<p>1、科学范畴，选择最优方式，避免利益冲突（understanding）</p>
<p>2、一种绝对、无条件对事物认知的能力，用法在于实践，创建社会关系（reason）</p>
<p>建立社会关系的礼非知性（1）</p>
<p>人心有限：理性规律</p>
<p>人心无限：比如构造上帝</p>
<p>因为世界历史已经形成。资本生产方式本质是超越国界，掠夺别人的资源，要无穷无尽的资源，无尽无尽的市场。在这个历史背景下，宋明心学不能盛行（来不及转变）</p>
<p>宋明心学不能盛行原因之一：中国的政治发送巨大变化，取消宰相制度。中断了中国文人，天下关怀的现实可能性。</p>
<p>这样就不能实现名族生命实践的道统。后果就是清朝的腐败。</p>
]]></content>
      <categories>
        <category>哲学</category>
      </categories>
      <tags>
        <tag>哲学，王德峰</tag>
      </tags>
  </entry>
  <entry>
    <title>哲学导论第4课</title>
    <url>/2020/05/02/%E5%93%B2%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%AC4%E8%AF%BE/</url>
    <content><![CDATA[<p>一个名族文化生命衰弱需要其他名族的思想和智慧的启发。</p>
<p>古希腊晚期道德秩序败坏，社会混乱，从东方犹太思想进入古希腊世界，刺激了古希腊，为后来的基督教形成建立了基础，造成了后来的中世纪。</p>
<p>隋唐时期引入佛教的经典，慢慢吸收思想的养料，完成文化的自我拯救。</p>
<p>玄奘 唯识宗</p>
<p>虚无的思想（般若）</p>
<p>8识：眼、耳、鼻、舌、身</p>
<p>第6识：意识。统摄前五种感觉。</p>
<p>第7识：末那识。感性世界在流变，但对同一个东西，都存在一个小我，就是心。</p>
<p>第8识：阿赖耶识（藏识/种子识）。</p>
<p>孟子：万物皆备于我，反身而诚乐莫大焉。真理本在心中。（孟子为中国心学的萌芽）</p>
<p>心有4个善端 : 修过、是非、慈让、恻隐。</p>
<p>建立礼，礼就是道德规则。</p>
<p>为了符合个人利益，通过礼来正名分，为防止免于大家利益纷争。</p>
<p>前提是人性本恶。</p>
<p>这是荀子的思想。荀子讲的心是自然性nature</p>
<p>孟子讲心是人性</p>
<p>心乃是哲学题材，非脏器。</p>
<p>善恶是人的社会存在，人的社会存在根据在于心（非mind 心智）。</p>
<p>7识从8识种子库里来，8识是超越小我的大我。任何思维都在一个思维范畴里，在大我里。</p>
<p>就好比speak和language。</p>
<p>引入佛学后，挽救文化生命，重建了对真理的了解。</p>
<p>进入宋明儒学，迎来中国第二次思想高峰。</p>
<p>佛教中国化禅宗。</p>
<p>金刚经:应无所往，而生其心。</p>
<p>宋明儒学有两个流派：</p>
<p>程朱理学。通过佛教的启发建立一种形而上的哲学体系，把天理讲清楚，并遵守它，存天理，灭人欲。</p>
<p>陆王心学：进行反驳，认为程朱理学违背心学原则，真理在心之内。</p>
<p>陆象山讲：吾心即宇宙，宇宙便是吾心。此心非小我。</p>
<p>王阳明说：心外无物。（与康德西方的心学很像）</p>
<p>启蒙是指让道德成为个人的自律而不是外部伦理权威的威力。</p>
]]></content>
      <categories>
        <category>哲学</category>
      </categories>
      <tags>
        <tag>哲学，王德峰</tag>
      </tags>
  </entry>
  <entry>
    <title>哲学导论第3课</title>
    <url>/2020/04/30/%E5%93%B2%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%AC3%E8%AF%BE/</url>
    <content><![CDATA[<p>发现很多事情都是站在西方哲学概念体系来解释中方哲学概念体系。</p>
<p>中国人讲国家，是不是等同于西方的概念? 这需要哲学的考察。</p>
<p>名词就是名器。</p>
<p>对于中，国家是感性的，motherland。</p>
<p>对于西，真正公民具有独立人格，市民生活。政治国家为我服务。</p>
<p>中国思想不能发展出超验。</p>
<p>中国近传统精神：儒道互补。</p>
<p>道是儒的反面。对于文明和理想的目标，总有道家思想来消解儒家思想。</p>
<p>一方坚持执着，一方去掉执着。</p>
<p>儒家具有家国天下的情怀，伦理政治的思想。</p>
<p>对于官，首先是教化，树立道德榜样，然后才是利益纷争的摆明。</p>
<p>这与西方不同，对于中方，伦理政治是不分开的，而西方分开。</p>
<p>西方有一基调就是人都是自私的，所以需要政治制约，解决纷争。</p>
<p>中国几千年文明但却没有宗教。</p>
<p>西方哲学搞理论。中方哲学讲究为人与做学问统一，比如孔子。</p>
<p>通过道德榜样，通过修养成为圣贤，然后治理天下。这是中国哲学治理天下的前提。</p>
<p>然后这里有一个很大的缺陷，如果当官的人并不是圣贤，而是伪善的（乡愿，孔子云：“乡愿，德之贼也”）</p>
<p>从历史来讲，其实这种情况一直都是在循环。所以每一代文人都有忧患意识。</p>
<p>所谓上梁不正下梁歪，如果没有一个好的榜样，就会影响下面的人。</p>
<p>西方是一个制度，一个宗教。制度制约管理者，宗教教导普通人。这和中方不同。</p>
<p>所以历史上，康有为曾想把儒家变为宗教。</p>
<p>儒家的原则和目标，到家的自在奸猾。</p>
<p>老子的《道德经》从一个角度看就是一本权术书。</p>
<p>讲经又讲权，讲原则又讲权变。就是如今的高度原则性与高度灵活性的统一。</p>
<p>以权变经，圆滑是中国文化传统的一个特征，早就中国的国民性格。</p>
<p>我们在这样的文化环境成长，虽然没有读过儒道两加经典，但也是受影响了。</p>
<p>这是一种对理解这个世界基本的态度。</p>
<p>不能救市，就能隐匿，追求个人的自在去吧。</p>
<p>不把原则坚持到底，中华名族成为世界众多名族中，最呼吁和平的名族。</p>
<p>这里讲究内方外圆，处事圆滑，不锋芒毕露，执着放在内心。儒道互补。</p>
<p>圆滑，不会保持旺盛的创造力，和生命的理想。从历史上来看，中华名族也遇到很多危险。</p>
<p>中国思想基本进程</p>
<p>（1）百家争鸣</p>
<p>由夏商周三朝的生命实践，体会了非常多种道，这就是百家。这是道统为立，中国文化发展还没有统一方向。</p>
<p>（2）两汉道统确定</p>
<p>通过对道的体会制作名器</p>
<p>（3）魏晋时期</p>
<p>发现使用之后千疮百孔，导致该时期，放浪形骸，藐视礼教。魏晋时期跟随道家态度。</p>
<p>这是中国文化衰落的征兆。</p>
]]></content>
      <categories>
        <category>哲学</category>
      </categories>
      <tags>
        <tag>哲学，王德峰</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis generator</title>
    <url>/2020/04/29/mybatis-generator/</url>
    <content><![CDATA[<p>使用mybatis generator来自动生成mapper和model。</p>
<p>发现自动生成的数据，应该是int却变为long，暂时不知道什么原因。</p>
<p>然后暂时解决方案如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table tableName&#x3D;&quot;question&quot; domainObjectName&#x3D;&quot;Question&quot;&gt;</span><br><span class="line">&lt;columnOverride column&#x3D;&quot;ID&quot; javaType&#x3D;&quot;java.lang.Integer&quot; jdbcType&#x3D;&quot;INTEGER&quot;&gt;&lt;&#x2F;columnOverride&gt;</span><br><span class="line">&lt;columnOverride column&#x3D;&quot;creator&quot; javaType&#x3D;&quot;java.lang.Integer&quot; jdbcType&#x3D;&quot;INTEGER&quot;&gt;&lt;&#x2F;columnOverride&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>





<p>这搞了挺久。。。出去散步<del>~</del></p>
]]></content>
      <categories>
        <category>mybatis generator</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>Spring Boot</tag>
        <tag>mybatis generator</tag>
      </tags>
  </entry>
  <entry>
    <title>哲学导论第2课</title>
    <url>/2020/04/29/%E5%93%B2%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%AC2%E8%AF%BE/</url>
    <content><![CDATA[<p>国民性与典章制度皆为器，是名族文化精神的载体。</p>
<h1 id="中西文化精神的根基差别"><a href="#中西文化精神的根基差别" class="headerlink" title="中西文化精神的根基差别"></a>中西文化精神的根基差别</h1><p>中西方都有着私有财产的历史。</p>
<p>司马迁写史记，有一篇叫货殖列传描述先秦商人。</p>
<p>古希腊就有着频繁商业活动。</p>
<h2 id="西方理解"><a href="#西方理解" class="headerlink" title="西方理解"></a>西方理解</h2><p>例如我有一块表，如何证明这块表属于我？</p>
<p>不是肉体器官占有了这块表，而是人格的存在，人格占有了外物。人格与物之间具有占有和被占有的关系。</p>
<p>人格是超感性存在，是超验，不在感性世界中。</p>
<p>当一位老者逝去，将遗产分给儿子时，这里就有着人格的存在。</p>
<p>也可看出法律也有形而上学原理。</p>
<p>钱本质上是智思体/意会体（noumenon，思想领会，人格真实比感性更真实），超感性，代表社会权利/</p>
<p>工程师、工人、资本家看机器各不相同。</p>
<p>上述都是康德阐发，可见私有财产和西方人格的存在联系到了一起。</p>
<h2 id="中方理解"><a href="#中方理解" class="headerlink" title="中方理解"></a>中方理解</h2><p>中国人要亲身感受，精神与肉体不缺分。</p>
<p>就好像中西方都有着灵魂的概念。</p>
<p>西方认为，人的肉体只会带来欲望，使得灵魂不存粹，当死去，进入天国可以与上帝一起，实现永恒的沉思。这里就构建了超越感性的世界。</p>
<p>中方认为死去，这辈子命不好，下辈子想要有一个好的开始。这里面具有感性。</p>
<p>中华名族还是讲究生命情感。</p>
<h1 id="感性能不能遵守超验规则的真实性？"><a href="#感性能不能遵守超验规则的真实性？" class="headerlink" title="感性能不能遵守超验规则的真实性？"></a>感性能不能遵守超验规则的真实性？</h1><p>规则是超验的。因为不是感性的，所有会感觉不自由。</p>
<p>例如一个学生高考离分数线差两分。</p>
<p>家长第一时间不会想说你差这个分数线两分，应该遵守这个规则。会想办法破坏规则。而是拿好贡品找菩萨或是谁谁谁帮忙。</p>
<p>对于没权没势的家庭会看着别人是否破坏规则，然后举报那个破坏规则的人。</p>
<p><strong><em>每一个名族的道统对于这个世界的领会都是不一样的。</em></strong></p>
<p>写到这里就觉得其实在这里从小所受教育其实受西方思想挺大的。从历史上讲，若中华名族的思想远播海外，那或许就是另一个局面了。</p>
<h1 id="中西方名族形成最初的智慧根源"><a href="#中西方名族形成最初的智慧根源" class="headerlink" title="中西方名族形成最初的智慧根源"></a>中西方名族形成最初的智慧根源</h1><p>名族形成最初的智慧的差异来自于最初路径的选择。</p>
<p>四个名族：中华名族（老子、孔子）、古希腊名族（柏拉图）、古印度（释迦摩尼）、古以色列</p>
<p>四大名族的思想开启了轴心时代。</p>
<p>思想不会新的，新的是指思潮。</p>
<h1 id="思想形成受最初受地理环境影响"><a href="#思想形成受最初受地理环境影响" class="headerlink" title="思想形成受最初受地理环境影响"></a>思想形成受最初受地理环境影响</h1><p>古希腊爱琴海，多岛屿，海上移民频繁。在同一个岛上会有不同部落。这里不能靠血缘关系，而是契约。但契约本身不可靠，所以在这之前就出现了原始宗教，通过诸神的伦理关系，将人与神产生关联，使得人间的契约神圣化。</p>
<p>religion 宗教-&gt;契约。</p>
<p>应中华民族生活位置是大陆，所以单靠学院关系，并不靠契约。</p>
]]></content>
      <categories>
        <category>哲学</category>
      </categories>
      <tags>
        <tag>哲学，王德峰</tag>
      </tags>
  </entry>
  <entry>
    <title>哲学导论第1课</title>
    <url>/2020/04/28/%E5%93%B2%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%AC1%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="何为哲学"><a href="#何为哲学" class="headerlink" title="何为哲学"></a>何为哲学</h1><p>哲学是论道学问。</p>
<p>道无法言说，而哲学就是研究无法言说的道。</p>
<h1 id="何为道"><a href="#何为道" class="headerlink" title="何为道"></a>何为道</h1><p>《周易》有云：“形而上者谓之道，形而下者谓之器”</p>
<p>形指的是感性，经验。</p>
<p>形而上指超越经验。</p>
<p>民族德社会典章制度是一种器（具体科学）。</p>
<p>举个例子：中国茶道所用工具是一种器，规则也是器。但一起体现了道。</p>
<p>无道就是没有文化生命，哲学论道就是把一个名族文化生命，发展方向德领会说出来。达到对文化生命德自觉这就是论道。</p>
<h1 id="道的领会不同"><a href="#道的领会不同" class="headerlink" title="道的领会不同"></a>道的领会不同</h1><p>中西方对道的领会不一样。因为名族不同。</p>
<p>西方讲究逻辑，区分了理性与非理性</p>
<p>中方没有区分，中华名族的哲学是以生命感受为基础。</p>
<p>西方哲学是范畴逻辑演绎。西方哲学是在超感性。<br>中国哲学是生命情感的体验，真理在生命情感的体验之中。</p>
<h1 id="哲学真理与科学真理有什么却别？"><a href="#哲学真理与科学真理有什么却别？" class="headerlink" title="哲学真理与科学真理有什么却别？"></a>哲学真理与科学真理有什么却别？</h1><p>科学真理无民族姓。</p>
<p>科学真理是对事物规律变化的描绘。非自发本身体现真理。</p>
<p>哲学真理里需要人的生命奋斗来体现。</p>
<p>哲学真理以民族生活实践为根基。</p>
<h1 id="哲学为何不能统一"><a href="#哲学为何不能统一" class="headerlink" title="哲学为何不能统一"></a>哲学为何不能统一</h1><p>中西方哲学都有真理的因素。了解真理然后需要实践。这是生命奋斗的体现，生命奋斗有名族性。</p>
<p>当开始实践时必定受当地规则制约。</p>
<p>从古到今出现危机时，都是由不同名族智慧的启发。</p>
<p>例如受到印度佛教启发后宋明中国思想第二次高潮。</p>
<p>欧洲没有犹太思想启发古希腊就没有欧洲中世纪。</p>
]]></content>
      <categories>
        <category>哲学</category>
      </categories>
      <tags>
        <tag>哲学，王德峰</tag>
      </tags>
  </entry>
  <entry>
    <title>计划2</title>
    <url>/2020/04/28/%E8%AE%A1%E5%88%922/</url>
    <content><![CDATA[<p>论文修改交上去了。</p>
<p>29，30号。全力冲击，看看能做多少事。</p>
]]></content>
      <categories>
        <category>计划</category>
      </categories>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title>计划1</title>
    <url>/2020/04/17/%E8%AE%A1%E5%88%921/</url>
    <content><![CDATA[<p>18号开始，7天。</p>
<p>冥想 15分钟</p>
<p>看专业之外的资料45分钟。</p>
<table>
<thead>
<tr>
<th>4.18</th>
<th>4.19</th>
<th>4.20</th>
<th>4.21</th>
<th>4.22</th>
<th>4.23</th>
<th>4.24</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>计划</category>
      </categories>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.3.3</title>
    <url>/2020/03/03/2020-3-3/</url>
    <content><![CDATA[<hr>
<a id="more"></a>

<p>距离考研结束已经很久了，我想是时候写一篇日记作为总结了。</p>
<p>这一次考研过程中，由于数学考试过程中心态过于紧张，导致最后选择题忘记填上去，最后因单科线过不了而结束。现在想来还是挺难受的。数学考场上的紧张和几个夜晚的悲伤将那段时间的效用达到了顶峰。这次失败打断了未来的计划。</p>
<p>自己对于考研这件事情挺执着的，再加上这此失败的原因，因为会去二战。一开始很担心时间浪费了，然后今天下午跟老师做心理咨询的时候相通了，我想每个人的进度都是不一样的，对于整个人生来说，这一年又算得了什么呢?将这一年过得充实就行了。</p>
<p>zk，不能和你一起实现我们的梦想，真的挺遗憾的。回想起我们一起学习的日子，每天很晚从鄞州图书馆走出来，一边走过公园一边聊着各种话题，然后坐公交车离开，那段时间真正地改变了我们的人生。无论如何，后面也要加油啊。</p>
<hr>
<p>先这样吧。</p>
]]></content>
      <categories>
        <category>生活日常</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>《睡眠革命》</title>
    <url>/2020/02/26/%E3%80%8A%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD%E3%80%8B/</url>
    <content><![CDATA[<h1 id="了解昼夜节律"><a href="#了解昼夜节律" class="headerlink" title="了解昼夜节律"></a>了解昼夜节律</h1><p><img src="/2020/02/26/%E3%80%8A%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD%E3%80%8B/a.png" alt></p>
<p>1．走到户外！让⽇光调整你的⽣物钟，⽽不是人工光线。 </p>
<p>2．了解你的各项⾼峰和低⾕数值，监控那些会在你⾝上⾃然⽽然发⽣的变化。使⽤穿戴式健⾝追踪器进⾏测量。 </p>
<p>3．早上放慢速度。醒来之后⽴⻢陷⼊⼀团忙乱之中，早晚会毁了你的⾝体。睡眠质量和我们早上醒来之后的所作所为息息相 关。 </p>
<h1 id="了解睡眠类型"><a href="#了解睡眠类型" class="headerlink" title="了解睡眠类型"></a>了解睡眠类型</h1><p>谷歌 慕尼黑大学睡觉类型调查问卷。</p>
<h1 id="90分钟睡眠法"><a href="#90分钟睡眠法" class="headerlink" title="90分钟睡眠法"></a>90分钟睡眠法</h1><p>设定必须起床的最早时间，必须比上学、上班或做其他事情的时间早至少90分钟。</p>
<p>根据起床时间和90分钟时长的睡眠周期，回过头算入睡时间。</p>
<p> 以90分钟为一个周期，五个睡眠周期，早上七点半起来，就在午夜12点睡（需要提前躺下15分钟，取决于多久能睡着）。</p>
<p>如果错过理想入睡时间，就要下一个周期开始的时间。</p>
<p>最好合计每周的睡眠周期，一天为五个睡眠周期的话，那就将每周获得35个睡眠周期设为目标，不要被其中一天的糟糕睡眠影响，每周至少有4个晚上拥有完美的时间安排，就没问题了。</p>
<p>先从每晚5个睡眠周期开始，看看7天之后感觉如何，之后再做调整。</p>
<p>尽量避免连续三个晚上睡眠不足的情况发生。</p>
]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>看到网上一句话记录一下</title>
    <url>/2020/02/18/%E7%9C%8B%E5%88%B0%E7%BD%91%E4%B8%8A%E4%B8%80%E5%8F%A5%E8%AF%9D%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B/</url>
    <content><![CDATA[<p>引用：</p>
<p>屌丝何苦为难屌丝 屌丝却只能为难屌丝 <strong>寰宇之大 眼界却只能停留在琐碎 格局实在太小 是时运之不幸 更是能力之不治</strong></p>
]]></content>
      <categories>
        <category>生活日常</category>
      </categories>
      <tags>
        <tag>生活日常</tag>
      </tags>
  </entry>
  <entry>
    <title>集成MyBatis实现数据持久化保存</title>
    <url>/2020/02/13/%E9%9B%86%E6%88%90MyBatis%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E4%BF%9D%E5%AD%98/</url>
    <content><![CDATA[<h1 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h1><p>对应SpringBoot需要使用MyBatis-Spring-Boot-Starter来连接数据库，这里我使用H2数据库。</p>
<p>官方文档：</p>
<p><a href="http://www.h2database.com/html/main.html" target="_blank" rel="noopener">H2</a></p>
<p><a href="https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">MyBatis-Spring-Boot-Starter</a></p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.0.0.RC1/reference/htmlsingle/#boot-features-embedded-database-support" target="_blank" rel="noopener">配置文件文档</a></p>
<p>整体思路：</p>
<p>1、添加H2的maven依赖，这种数据库可以内置在里面，直接idea直接来创建数据库</p>
<p>2、MyBatis-Spring-Boot-Starter的maven依赖</p>
<p>3、写对应配置文件</p>
<p>4、写mapper</p>
<hr>
<a id="more"></a>

<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>对应配置文件添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.datasource.url&#x3D;jdbc:h2:路径</span><br><span class="line">spring.datasource.username&#x3D;用户名</span><br><span class="line">spring.datasource.password&#x3D;密码</span><br><span class="line">spring.datasource.driver-class-name&#x3D;org.h2.Driver</span><br></pre></td></tr></table></figure>



<h1 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h1><p>mapper:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> life.cj.community.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> life.cj.community.model.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user (name,account_id,token,gmt_create,gmt_modified) values (#&#123;name&#125;,#&#123;accountId&#125;,#&#123;token&#125;,#&#123;gmtCreate&#125;,#&#123;gmtModified&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="User数据结构"><a href="#User数据结构" class="headerlink" title="User数据结构"></a>User数据结构</h1><p>对于存储在服务器内部的数据结构，创建model包（区别与dto）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> life.cj.community.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String accountId;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">    <span class="keyword">private</span> Long gmtCreate;</span><br><span class="line">    <span class="keyword">private</span> Long gmtModified;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAccountId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountId</span><span class="params">(String accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountId = accountId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getGmtCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gmtCreate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGmtCreate</span><span class="params">(Long gmtCreate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gmtCreate = gmtCreate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getGmtModified</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gmtModified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGmtModified</span><span class="params">(Long gmtModified)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gmtModified = gmtModified;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>H2</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>关于SpringBoot下的Session和Cookies</title>
    <url>/2020/02/13/%E5%85%B3%E4%BA%8ESpringBoot%E4%B8%8B%E7%9A%84session%E5%92%8CCookies/</url>
    <content><![CDATA[<p>简要描述：</p>
<p>服务器就是一家银行。</p>
<p>Session就是在该银行下开通的户口。</p>
<p>Cookies就是给该户口办理的银行卡。</p>
<p>用户可以拿着银行卡给该银行，银行可以凭借该银行卡找到该户口，知道了用户的身份。</p>
<p>给用户开户：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getSession().setAttribute(<span class="string">"user"</span>,githubUser);</span><br></pre></td></tr></table></figure>

<p>SpringBoot有这种机制，直接返回时，会自动加入对应的Cookies(银行卡)给用户，只是这是随机，不能指定。</p>
<hr>
<p>thymeleaf的语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">th:if&#x3D;&quot;$&#123;session.user!&#x3D; null&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">th:text&#x3D;&quot;$&#123;session.user.getName()&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Cookies，Session</tag>
      </tags>
  </entry>
  <entry>
    <title>调用github接口实现登录功能</title>
    <url>/2020/02/12/%E8%B0%83%E7%94%A8github%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>本文讲述如何调用Github的接口，实现IT社区的登录功能。</p>
<a id="more"></a>

<h1 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h1><p><a href="https://developer.github.com/apps/building-oauth-apps/" target="_blank" rel="noopener">参考文档</a></p>
<h1 id="第一步：创建并注册OAuth-App（对应步骤1-2）"><a href="#第一步：创建并注册OAuth-App（对应步骤1-2）" class="headerlink" title="第一步：创建并注册OAuth App（对应步骤1,2）"></a>第一步：创建并注册OAuth App（对应步骤1,2）</h1><h1 id="第二部-用户授权将github上的个人信息给我的应用"><a href="#第二部-用户授权将github上的个人信息给我的应用" class="headerlink" title="第二部 : 用户授权将github上的个人信息给我的应用"></a>第二部 : 用户授权将github上的个人信息给我的应用</h1><p><img src="/2020/02/12/%E8%B0%83%E7%94%A8github%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/1.jpg" alt="流程图"></p>
<p><a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/" target="_blank" rel="noopener">对应链接</a></p>
<h2 id="调用github的authorize接口"><a href="#调用github的authorize接口" class="headerlink" title="调用github的authorize接口"></a>调用github的authorize接口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;login&#x2F;oauth&#x2F;authorize?client_id&#x3D;5f60243f732e3787b680&amp;redirect_uri&#x3D;http:&#x2F;&#x2F;localhost:8887&#x2F;callback&amp;scope&#x3D;user&amp;state&#x3D;1&quot;&gt;登录&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>上面向接口发送了三个参数</p>
<ul>
<li>client_id：这个就是步骤1注册时，提供给你的一个id，就相当于一个github给应用注册者的一个标识符</li>
<li>redirect_uri： 当授权完成时，返回的地址</li>
<li>scope：目前网站设计只要向github获取用户的个人信息就够了</li>
<li>state ：这里应该随机调入一个数，并在本地保存下来，后面github又会返回这个数，这主要是保护作用，防止第三方伪装。（这里为了简便，随便填入1）</li>
</ul>
<p>当github返回时，会另外携带<strong><em>code</em></strong>和<strong><em>state</em></strong>两个参数。</p>
<p>上述就完成了流程图中的1.2和1.2.1两个步骤。</p>
<h2 id="调用github的access-token接口"><a href="#调用github的access-token接口" class="headerlink" title="调用github的access_token接口"></a>调用github的access_token接口</h2><p>这里不是由用户发出，而是由服务器本身发出，所以写一个程序用来接受之前github发给我的两个参数，并再带上必要的参数，向github发出HTTP请求，然后获取access_token。</p>
<p>程序如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> life.cj.community.Controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> life.cj.community.dto.AccessTokenDTO;</span><br><span class="line"><span class="keyword">import</span> life.cj.community.dto.GithubUser;</span><br><span class="line"><span class="keyword">import</span> life.cj.community.provider.GithubProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GithubProvider githubProvider; 	<span class="comment">//该类使用了OkHttp来发出请求，所以按程序组织习惯，该类放在了用Controller同级的Provider包中。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;github.client.id&#125;"</span>) 	<span class="comment">//作为此类数据，应当放在配置文件中</span></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;github.client.secret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String clientSecret;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;github.redirect.uri&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String redirectUri;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/callback"</span>)<span class="comment">//流程图中1.2.1步返回时，接受code和state两个参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callback</span><span class="params">(@RequestParam(name=<span class="string">"code"</span>)</span>String code,</span></span><br><span class="line"><span class="function">                           @<span class="title">RequestParam</span><span class="params">(name=<span class="string">"state"</span>)</span>String state)</span>&#123;</span><br><span class="line">        AccessTokenDTO accessTokenDTO = <span class="keyword">new</span> AccessTokenDTO();<span class="comment">//参数超过了2个，创AccessTokenDTO</span></span><br><span class="line">		accessTokenDTO.setClient_id(clientId);</span><br><span class="line">        accessTokenDTO.setClient_secret(clientSecret);</span><br><span class="line">        accessTokenDTO.setCode(code);</span><br><span class="line">        accessTokenDTO.setRedirect_uri(redirectUri);</span><br><span class="line">        accessTokenDTO.setState(state);</span><br><span class="line">        String aceessToken = githubProvider.getAceessToken(accessTokenDTO);</span><br><span class="line">        GithubUser user = githubProvider.getUser(aceessToken);</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> life.cj.community.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> life.cj.community.dto.AccessTokenDTO;</span><br><span class="line"><span class="keyword">import</span> life.cj.community.dto.GithubUser;</span><br><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAceessToken</span><span class="params">(AccessTokenDTO accessTokenDTO)</span></span>&#123; <span class="comment">//获取1.2.1.2返回时的token</span></span><br><span class="line">        MediaType mediaType = MediaType.get(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        RequestBody body = RequestBody.create(mediaType, JSON.toJSONString(accessTokenDTO));</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(<span class="string">"https://github.com/login/oauth/access_token"</span>)</span><br><span class="line">                .post(body)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> (Response response = client.newCall(request).execute()) &#123;</span><br><span class="line">            String string = response.body().string();</span><br><span class="line">            String token = string.split(<span class="string">"&amp;"</span>)[<span class="number">0</span>].split(<span class="string">"="</span>)[<span class="number">1</span>];<span class="comment">//根据返回数据形式，获取信息</span></span><br><span class="line">            <span class="keyword">return</span>  token;</span><br><span class="line">            <span class="comment">//System.out.println(string);</span></span><br><span class="line">            <span class="comment">//return response.body().string();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完成了1.2.1.1和1.2.1.2步骤</p>
<h2 id="调用github的user接口"><a href="#调用github的user接口" class="headerlink" title="调用github的user接口"></a>调用github的user接口</h2><p>获取user信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> GithubUser <span class="title">getUser</span><span class="params">(String accessToken)</span></span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(<span class="string">"https://api.github.com/user?access_token="</span>+ accessToken)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Response response = client.newCall(request).execute();</span><br><span class="line">            String string = response.body().string();</span><br><span class="line">            <span class="comment">//使用fastjson将string的json对象解析成java的类对象</span></span><br><span class="line">            GithubUser githubUser = JSON.parseObject(string, GithubUser<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">return</span> githubUser;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h1 id="附加工具"><a href="#附加工具" class="headerlink" title="附加工具"></a>附加工具</h1><h2 id="OkHttp"><a href="#OkHttp" class="headerlink" title="OkHttp"></a>OkHttp</h2><h2 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h2><h2 id="mvnrepository"><a href="#mvnrepository" class="headerlink" title="mvnrepository"></a>mvnrepository</h2><h1 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h1><p>这种机制是如何设计出来的？</p>
<p><a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">Oauth设计机制</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Github</tag>
        <tag>OAuth Apps</tag>
        <tag>Fastjson</tag>
        <tag>OkHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>git clone加速</title>
    <url>/2020/02/11/git-clone%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<p><strong><em>解决方案</em></strong></p>
<a id="more"></a>

<p>设置代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>取消代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<p>查看git全局设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>

<p>只对github</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global http.https:&#x2F;&#x2F;github.com.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080 </span><br><span class="line">git config --global --unset http.https:&#x2F;&#x2F;github.com.proxy</span><br></pre></td></tr></table></figure>



<p><strong><em>此方案前提需要代理</em></strong></p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/10/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>用了几天的时间把博客搭建起来了，此博客打算用于记录生活和学习过程。</p>
<p>此博客还需要不断完善，目前先总结一下搭建过程。</p>
<a id="more"></a>

<h1 id="1-域名和解析"><a href="#1-域名和解析" class="headerlink" title="1.域名和解析"></a>1.域名和解析</h1><h2 id="1-1-域名购买"><a href="#1-1-域名购买" class="headerlink" title="1.1 域名购买"></a>1.1 域名购买</h2><p>这是<a href="https://www.namesilo.com/" target="_blank" rel="noopener">域名购买地址</a>，这个域名提供商免费提供whois信息保护，所以就选择了这家。</p>
<h2 id="1-2-DNS解析设置"><a href="#1-2-DNS解析设置" class="headerlink" title="1.2 DNS解析设置"></a>1.2 DNS解析设置</h2><p>因为我的博客是同时部署到了Github pages和coding page，所以dns服务设置了阿里云的dns服务，将国内流量导向coding，将国外的流量导向github，同时将github和coding设置为强制开始https。<br><img src="/2020/02/10/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.jpg" alt="域名解析"></p>
<h1 id="2-博客搭建"><a href="#2-博客搭建" class="headerlink" title="2.博客搭建"></a>2.博客搭建</h1><h2 id="2-1-环境配置"><a href="#2-1-环境配置" class="headerlink" title="2.1 环境配置"></a>2.1 环境配置</h2><p>本博客基于Hexo NexT主题，所以要先安装<a href="https://nodejs.org" target="_blank" rel="noopener">Node.js</a>和<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>。配置完成后，在git bash中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>hexo就安装完成了，接着在指定文件夹（blog搭建的地方）打开git bash输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>这样就搭建起了一个初始的blog，所以非常便捷。</p>
<h2 id="2-2-常用操作"><a href="#2-2-常用操作" class="headerlink" title="2.2 常用操作"></a>2.2 常用操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;&quot;&#x2F;&#x2F;新文章，&quot;&quot;里面是文章名&#96;</span><br><span class="line">hexo g&#x2F;&#x2F;生成静态文件&#96;</span><br><span class="line">hexo clean &#x2F;&#x2F;清除缓存</span><br><span class="line">hexo s&#x2F;&#x2F;启动服务器</span><br><span class="line">hexo d&#x2F;&#x2F;部署</span><br></pre></td></tr></table></figure>
<h2 id="2-3-更改博客主题"><a href="#2-3-更改博客主题" class="headerlink" title="2.3 更改博客主题"></a>2.3 更改博客主题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &lt;blog-path&gt;  #定位到 Hexo 博客目录</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next &#x2F;themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>然后修改博客根目录_config.yml配置文件,将theme对应的值改为nexT即可。</p>
<h2 id="2-4更多详细配置"><a href="#2-4更多详细配置" class="headerlink" title="2.4更多详细配置"></a>2.4更多详细配置</h2><p>可参看:</p>
<ul>
<li><p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Hexo文档</a></p>
</li>
<li><p><a href="https://theme-next.org/docs/" target="_blank" rel="noopener">NexT文档</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
