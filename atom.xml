<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CJ&#39;S BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cjay.life/"/>
  <updated>2020-02-27T07:52:29.675Z</updated>
  <id>https://cjay.life/</id>
  
  <author>
    <name>CJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《睡眠革命》</title>
    <link href="https://cjay.life/2020/02/26/%E3%80%8A%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD%E3%80%8B/"/>
    <id>https://cjay.life/2020/02/26/%E3%80%8A%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD%E3%80%8B/</id>
    <published>2020-02-26T13:25:42.000Z</published>
    <updated>2020-02-27T07:52:29.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="了解昼夜节律"><a href="#了解昼夜节律" class="headerlink" title="了解昼夜节律"></a>了解昼夜节律</h1><p><img src="/2020/02/26/%E3%80%8A%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD%E3%80%8B/a.png" alt></p><p>1．走到户外！让⽇光调整你的⽣物钟，⽽不是人工光线。 </p><p>2．了解你的各项⾼峰和低⾕数值，监控那些会在你⾝上⾃然⽽然发⽣的变化。使⽤穿戴式健⾝追踪器进⾏测量。 </p><p>3．早上放慢速度。醒来之后⽴⻢陷⼊⼀团忙乱之中，早晚会毁了你的⾝体。睡眠质量和我们早上醒来之后的所作所为息息相 关。 </p><h1 id="了解睡眠类型"><a href="#了解睡眠类型" class="headerlink" title="了解睡眠类型"></a>了解睡眠类型</h1><p>谷歌 慕尼黑大学睡觉类型调查问卷。</p><h1 id="90分钟睡眠法"><a href="#90分钟睡眠法" class="headerlink" title="90分钟睡眠法"></a>90分钟睡眠法</h1><p>设定必须起床的最早时间，必须比上学、上班或做其他事情的时间早至少90分钟。</p><p>根据起床时间和90分钟时长的睡眠周期，回过头算入睡时间。</p><p> 以90分钟为一个周期，五个睡眠周期，早上七点半起来，就在午夜12点睡（需要提前躺下15分钟，取决于多久能睡着）。</p><p>如果错过理想入睡时间，就要下一个周期开始的时间。</p><p>最好合计每周的睡眠周期，一天为五个睡眠周期的话，那就将每周获得35个睡眠周期设为目标，不要被其中一天的糟糕睡眠影响，每周至少有4个晚上拥有完美的时间安排，就没问题了。</p><p>先从每晚5个睡眠周期开始，看看7天之后感觉如何，之后再做调整。</p><p>尽量避免连续三个晚上睡眠不足的情况发生。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;了解昼夜节律&quot;&gt;&lt;a href=&quot;#了解昼夜节律&quot; class=&quot;headerlink&quot; title=&quot;了解昼夜节律&quot;&gt;&lt;/a&gt;了解昼夜节律&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2020/02/26/%E3%80%8A%E7%9D%A1%E7%9C%A0%E9%9
      
    
    </summary>
    
    
      <category term="书籍" scheme="https://cjay.life/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="书籍" scheme="https://cjay.life/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>看到网上一句话记录一下</title>
    <link href="https://cjay.life/2020/02/18/%E7%9C%8B%E5%88%B0%E7%BD%91%E4%B8%8A%E4%B8%80%E5%8F%A5%E8%AF%9D%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B/"/>
    <id>https://cjay.life/2020/02/18/%E7%9C%8B%E5%88%B0%E7%BD%91%E4%B8%8A%E4%B8%80%E5%8F%A5%E8%AF%9D%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B/</id>
    <published>2020-02-18T04:23:10.000Z</published>
    <updated>2020-02-18T04:35:54.417Z</updated>
    
    <content type="html"><![CDATA[<p>引用：</p><p>屌丝何苦为难屌丝 屌丝却只能为难屌丝 <strong>寰宇之大 眼界却只能停留在琐碎 格局实在太小 是时运之不幸 更是能力之不治</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引用：&lt;/p&gt;
&lt;p&gt;屌丝何苦为难屌丝 屌丝却只能为难屌丝 &lt;strong&gt;寰宇之大 眼界却只能停留在琐碎 格局实在太小 是时运之不幸 更是能力之不治&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="生活日常" scheme="https://cjay.life/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="生活日常" scheme="https://cjay.life/tags/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>集成MyBatis实现数据持久化保存</title>
    <link href="https://cjay.life/2020/02/13/%E9%9B%86%E6%88%90MyBatis%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E4%BF%9D%E5%AD%98/"/>
    <id>https://cjay.life/2020/02/13/%E9%9B%86%E6%88%90MyBatis%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E4%BF%9D%E5%AD%98/</id>
    <published>2020-02-13T10:28:38.000Z</published>
    <updated>2020-02-13T11:01:17.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h1><p>对应SpringBoot需要使用MyBatis-Spring-Boot-Starter来连接数据库，这里我使用H2数据库。</p><p>官方文档：</p><p><a href="http://www.h2database.com/html/main.html" target="_blank" rel="noopener">H2</a></p><p><a href="https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">MyBatis-Spring-Boot-Starter</a></p><p><a href="https://docs.spring.io/spring-boot/docs/2.0.0.RC1/reference/htmlsingle/#boot-features-embedded-database-support" target="_blank" rel="noopener">配置文件文档</a></p><p>整体思路：</p><p>1、添加H2的maven依赖，这种数据库可以内置在里面，直接idea直接来创建数据库</p><p>2、MyBatis-Spring-Boot-Starter的maven依赖</p><p>3、写对应配置文件</p><p>4、写mapper</p><hr><a id="more"></a><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>对应配置文件添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url&#x3D;jdbc:h2:路径</span><br><span class="line">spring.datasource.username&#x3D;用户名</span><br><span class="line">spring.datasource.password&#x3D;密码</span><br><span class="line">spring.datasource.driver-class-name&#x3D;org.h2.Driver</span><br></pre></td></tr></table></figure><h1 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h1><p>mapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> life.cj.community.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> life.cj.community.model.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user (name,account_id,token,gmt_create,gmt_modified) values (#&#123;name&#125;,#&#123;accountId&#125;,#&#123;token&#125;,#&#123;gmtCreate&#125;,#&#123;gmtModified&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="User数据结构"><a href="#User数据结构" class="headerlink" title="User数据结构"></a>User数据结构</h1><p>对于存储在服务器内部的数据结构，创建model包（区别与dto）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> life.cj.community.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String accountId;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">    <span class="keyword">private</span> Long gmtCreate;</span><br><span class="line">    <span class="keyword">private</span> Long gmtModified;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAccountId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountId</span><span class="params">(String accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountId = accountId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getGmtCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gmtCreate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGmtCreate</span><span class="params">(Long gmtCreate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gmtCreate = gmtCreate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getGmtModified</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gmtModified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGmtModified</span><span class="params">(Long gmtModified)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gmtModified = gmtModified;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简要&quot;&gt;&lt;a href=&quot;#简要&quot; class=&quot;headerlink&quot; title=&quot;简要&quot;&gt;&lt;/a&gt;简要&lt;/h1&gt;&lt;p&gt;对应SpringBoot需要使用MyBatis-Spring-Boot-Starter来连接数据库，这里我使用H2数据库。&lt;/p&gt;
&lt;p&gt;官方文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.h2database.com/html/main.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;H2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyBatis-Spring-Boot-Starter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.0.RC1/reference/htmlsingle/#boot-features-embedded-database-support&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;配置文件文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整体思路：&lt;/p&gt;
&lt;p&gt;1、添加H2的maven依赖，这种数据库可以内置在里面，直接idea直接来创建数据库&lt;/p&gt;
&lt;p&gt;2、MyBatis-Spring-Boot-Starter的maven依赖&lt;/p&gt;
&lt;p&gt;3、写对应配置文件&lt;/p&gt;
&lt;p&gt;4、写mapper&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://cjay.life/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://cjay.life/tags/Spring-Boot/"/>
    
      <category term="H2" scheme="https://cjay.life/tags/H2/"/>
    
      <category term="MyBatis" scheme="https://cjay.life/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>关于SpringBoot下的Session和Cookies</title>
    <link href="https://cjay.life/2020/02/13/%E5%85%B3%E4%BA%8ESpringBoot%E4%B8%8B%E7%9A%84session%E5%92%8CCookies/"/>
    <id>https://cjay.life/2020/02/13/%E5%85%B3%E4%BA%8ESpringBoot%E4%B8%8B%E7%9A%84session%E5%92%8CCookies/</id>
    <published>2020-02-13T09:51:47.000Z</published>
    <updated>2020-02-13T10:19:24.995Z</updated>
    
    <content type="html"><![CDATA[<p>简要描述：</p><p>服务器就是一家银行。</p><p>Session就是在该银行下开通的户口。</p><p>Cookies就是给该户口办理的银行卡。</p><p>用户可以拿着银行卡给该银行，银行可以凭借该银行卡找到该户口，知道了用户的身份。</p><p>给用户开户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getSession().setAttribute(<span class="string">"user"</span>,githubUser);</span><br></pre></td></tr></table></figure><p>SpringBoot有这种机制，直接返回时，会自动加入对应的Cookies(银行卡)给用户，只是这是随机，不能指定。</p><hr><p>thymeleaf的语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">th:if&#x3D;&quot;$&#123;session.user!&#x3D; null&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">th:text&#x3D;&quot;$&#123;session.user.getName()&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简要描述：&lt;/p&gt;
&lt;p&gt;服务器就是一家银行。&lt;/p&gt;
&lt;p&gt;Session就是在该银行下开通的户口。&lt;/p&gt;
&lt;p&gt;Cookies就是给该户口办理的银行卡。&lt;/p&gt;
&lt;p&gt;用户可以拿着银行卡给该银行，银行可以凭借该银行卡找到该户口，知道了用户的身份。&lt;/p&gt;
&lt;p&gt;给用户
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://cjay.life/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://cjay.life/tags/Spring-Boot/"/>
    
      <category term="Cookies，Session" scheme="https://cjay.life/tags/Cookies%EF%BC%8CSession/"/>
    
  </entry>
  
  <entry>
    <title>调用github接口实现登录功能</title>
    <link href="https://cjay.life/2020/02/12/%E8%B0%83%E7%94%A8github%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
    <id>https://cjay.life/2020/02/12/%E8%B0%83%E7%94%A8github%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</id>
    <published>2020-02-12T03:25:13.000Z</published>
    <updated>2020-02-12T06:10:56.363Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲述如何调用Github的接口，实现IT社区的登录功能。</p><a id="more"></a><h1 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h1><p><a href="https://developer.github.com/apps/building-oauth-apps/" target="_blank" rel="noopener">参考文档</a></p><h1 id="第一步：创建并注册OAuth-App（对应步骤1-2）"><a href="#第一步：创建并注册OAuth-App（对应步骤1-2）" class="headerlink" title="第一步：创建并注册OAuth App（对应步骤1,2）"></a>第一步：创建并注册OAuth App（对应步骤1,2）</h1><h1 id="第二部-用户授权将github上的个人信息给我的应用"><a href="#第二部-用户授权将github上的个人信息给我的应用" class="headerlink" title="第二部 : 用户授权将github上的个人信息给我的应用"></a>第二部 : 用户授权将github上的个人信息给我的应用</h1><p><img src="/2020/02/12/%E8%B0%83%E7%94%A8github%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/1.jpg" alt="流程图"></p><p><a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/" target="_blank" rel="noopener">对应链接</a></p><h2 id="调用github的authorize接口"><a href="#调用github的authorize接口" class="headerlink" title="调用github的authorize接口"></a>调用github的authorize接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;login&#x2F;oauth&#x2F;authorize?client_id&#x3D;5f60243f732e3787b680&amp;redirect_uri&#x3D;http:&#x2F;&#x2F;localhost:8887&#x2F;callback&amp;scope&#x3D;user&amp;state&#x3D;1&quot;&gt;登录&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>上面向接口发送了三个参数</p><ul><li>client_id：这个就是步骤1注册时，提供给你的一个id，就相当于一个github给应用注册者的一个标识符</li><li>redirect_uri： 当授权完成时，返回的地址</li><li>scope：目前网站设计只要向github获取用户的个人信息就够了</li><li>state ：这里应该随机调入一个数，并在本地保存下来，后面github又会返回这个数，这主要是保护作用，防止第三方伪装。（这里为了简便，随便填入1）</li></ul><p>当github返回时，会另外携带<strong><em>code</em></strong>和<strong><em>state</em></strong>两个参数。</p><p>上述就完成了流程图中的1.2和1.2.1两个步骤。</p><h2 id="调用github的access-token接口"><a href="#调用github的access-token接口" class="headerlink" title="调用github的access_token接口"></a>调用github的access_token接口</h2><p>这里不是由用户发出，而是由服务器本身发出，所以写一个程序用来接受之前github发给我的两个参数，并再带上必要的参数，向github发出HTTP请求，然后获取access_token。</p><p>程序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> life.cj.community.Controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> life.cj.community.dto.AccessTokenDTO;</span><br><span class="line"><span class="keyword">import</span> life.cj.community.dto.GithubUser;</span><br><span class="line"><span class="keyword">import</span> life.cj.community.provider.GithubProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GithubProvider githubProvider; <span class="comment">//该类使用了OkHttp来发出请求，所以按程序组织习惯，该类放在了用Controller同级的Provider包中。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;github.client.id&#125;"</span>) <span class="comment">//作为此类数据，应当放在配置文件中</span></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;github.client.secret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String clientSecret;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;github.redirect.uri&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String redirectUri;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/callback"</span>)<span class="comment">//流程图中1.2.1步返回时，接受code和state两个参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callback</span><span class="params">(@RequestParam(name=<span class="string">"code"</span>)</span>String code,</span></span><br><span class="line"><span class="function">                           @<span class="title">RequestParam</span><span class="params">(name=<span class="string">"state"</span>)</span>String state)</span>&#123;</span><br><span class="line">        AccessTokenDTO accessTokenDTO = <span class="keyword">new</span> AccessTokenDTO();<span class="comment">//参数超过了2个，创AccessTokenDTO</span></span><br><span class="line">accessTokenDTO.setClient_id(clientId);</span><br><span class="line">        accessTokenDTO.setClient_secret(clientSecret);</span><br><span class="line">        accessTokenDTO.setCode(code);</span><br><span class="line">        accessTokenDTO.setRedirect_uri(redirectUri);</span><br><span class="line">        accessTokenDTO.setState(state);</span><br><span class="line">        String aceessToken = githubProvider.getAceessToken(accessTokenDTO);</span><br><span class="line">        GithubUser user = githubProvider.getUser(aceessToken);</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> life.cj.community.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> life.cj.community.dto.AccessTokenDTO;</span><br><span class="line"><span class="keyword">import</span> life.cj.community.dto.GithubUser;</span><br><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAceessToken</span><span class="params">(AccessTokenDTO accessTokenDTO)</span></span>&#123; <span class="comment">//获取1.2.1.2返回时的token</span></span><br><span class="line">        MediaType mediaType = MediaType.get(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        RequestBody body = RequestBody.create(mediaType, JSON.toJSONString(accessTokenDTO));</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(<span class="string">"https://github.com/login/oauth/access_token"</span>)</span><br><span class="line">                .post(body)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> (Response response = client.newCall(request).execute()) &#123;</span><br><span class="line">            String string = response.body().string();</span><br><span class="line">            String token = string.split(<span class="string">"&amp;"</span>)[<span class="number">0</span>].split(<span class="string">"="</span>)[<span class="number">1</span>];<span class="comment">//根据返回数据形式，获取信息</span></span><br><span class="line">            <span class="keyword">return</span>  token;</span><br><span class="line">            <span class="comment">//System.out.println(string);</span></span><br><span class="line">            <span class="comment">//return response.body().string();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成了1.2.1.1和1.2.1.2步骤</p><h2 id="调用github的user接口"><a href="#调用github的user接口" class="headerlink" title="调用github的user接口"></a>调用github的user接口</h2><p>获取user信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> GithubUser <span class="title">getUser</span><span class="params">(String accessToken)</span></span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(<span class="string">"https://api.github.com/user?access_token="</span>+ accessToken)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Response response = client.newCall(request).execute();</span><br><span class="line">            String string = response.body().string();</span><br><span class="line">            <span class="comment">//使用fastjson将string的json对象解析成java的类对象</span></span><br><span class="line">            GithubUser githubUser = JSON.parseObject(string, GithubUser<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">return</span> githubUser;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="附加工具"><a href="#附加工具" class="headerlink" title="附加工具"></a>附加工具</h1><h2 id="OkHttp"><a href="#OkHttp" class="headerlink" title="OkHttp"></a>OkHttp</h2><h2 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h2><h2 id="mvnrepository"><a href="#mvnrepository" class="headerlink" title="mvnrepository"></a>mvnrepository</h2><h1 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h1><p>这种机制是如何设计出来的？</p><p><a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">Oauth设计机制</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲述如何调用Github的接口，实现IT社区的登录功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://cjay.life/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://cjay.life/tags/Spring-Boot/"/>
    
      <category term="Github" scheme="https://cjay.life/tags/Github/"/>
    
      <category term="OAuth Apps" scheme="https://cjay.life/tags/OAuth-Apps/"/>
    
      <category term="Fastjson" scheme="https://cjay.life/tags/Fastjson/"/>
    
      <category term="OkHttp" scheme="https://cjay.life/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>git clone加速</title>
    <link href="https://cjay.life/2020/02/11/git-clone%E5%8A%A0%E9%80%9F/"/>
    <id>https://cjay.life/2020/02/11/git-clone%E5%8A%A0%E9%80%9F/</id>
    <published>2020-02-11T03:50:24.000Z</published>
    <updated>2020-02-11T05:43:23.379Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>解决方案</em></strong></p><a id="more"></a><p>设置代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>取消代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>查看git全局设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><p>只对github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.https:&#x2F;&#x2F;github.com.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080 </span><br><span class="line">git config --global --unset http.https:&#x2F;&#x2F;github.com.proxy</span><br></pre></td></tr></table></figure><p><strong><em>此方案前提需要代理</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;解决方案&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技巧" scheme="https://cjay.life/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="技巧" scheme="https://cjay.life/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cjay.life/2020/02/10/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://cjay.life/2020/02/10/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2020-02-10T08:26:08.000Z</published>
    <updated>2020-02-11T03:59:31.323Z</updated>
    
    <content type="html"><![CDATA[<p>用了几天的时间把博客搭建起来了，此博客打算用于记录生活和学习过程。</p><p>此博客还需要不断完善，目前先总结一下搭建过程。</p><a id="more"></a><h1 id="1-域名和解析"><a href="#1-域名和解析" class="headerlink" title="1.域名和解析"></a>1.域名和解析</h1><h2 id="1-1-域名购买"><a href="#1-1-域名购买" class="headerlink" title="1.1 域名购买"></a>1.1 域名购买</h2><p>这是<a href="https://www.namesilo.com/" target="_blank" rel="noopener">域名购买地址</a>，这个域名提供商免费提供whois信息保护，所以就选择了这家。</p><h2 id="1-2-DNS解析设置"><a href="#1-2-DNS解析设置" class="headerlink" title="1.2 DNS解析设置"></a>1.2 DNS解析设置</h2><p>因为我的博客是同时部署到了Github pages和coding page，所以dns服务设置了阿里云的dns服务，将国内流量导向coding，将国外的流量导向github，同时将github和coding设置为强制开始https。<br><img src="/2020/02/10/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.jpg" alt="域名解析"></p><h1 id="2-博客搭建"><a href="#2-博客搭建" class="headerlink" title="2.博客搭建"></a>2.博客搭建</h1><h2 id="2-1-环境配置"><a href="#2-1-环境配置" class="headerlink" title="2.1 环境配置"></a>2.1 环境配置</h2><p>本博客基于Hexo NexT主题，所以要先安装<a href="https://nodejs.org" target="_blank" rel="noopener">Node.js</a>和<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>。配置完成后，在git bash中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>hexo就安装完成了，接着在指定文件夹（blog搭建的地方）打开git bash输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这样就搭建起了一个初始的blog，所以非常便捷。</p><h2 id="2-2-常用操作"><a href="#2-2-常用操作" class="headerlink" title="2.2 常用操作"></a>2.2 常用操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;&quot;&#x2F;&#x2F;新文章，&quot;&quot;里面是文章名&#96;</span><br><span class="line">hexo g&#x2F;&#x2F;生成静态文件&#96;</span><br><span class="line">hexo clean &#x2F;&#x2F;清除缓存</span><br><span class="line">hexo s&#x2F;&#x2F;启动服务器</span><br><span class="line">hexo d&#x2F;&#x2F;部署</span><br></pre></td></tr></table></figure><h2 id="2-3-更改博客主题"><a href="#2-3-更改博客主题" class="headerlink" title="2.3 更改博客主题"></a>2.3 更改博客主题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;blog-path&gt;  #定位到 Hexo 博客目录</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next &#x2F;themes&#x2F;next</span><br></pre></td></tr></table></figure><p>然后修改博客根目录_config.yml配置文件,将theme对应的值改为nexT即可。</p><h2 id="2-4更多详细配置"><a href="#2-4更多详细配置" class="headerlink" title="2.4更多详细配置"></a>2.4更多详细配置</h2><p>可参看:</p><ul><li><p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Hexo文档</a></p></li><li><p><a href="https://theme-next.org/docs/" target="_blank" rel="noopener">NexT文档</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用了几天的时间把博客搭建起来了，此博客打算用于记录生活和学习过程。&lt;/p&gt;
&lt;p&gt;此博客还需要不断完善，目前先总结一下搭建过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://cjay.life/categories/blog/"/>
    
    
      <category term="blog" scheme="https://cjay.life/tags/blog/"/>
    
  </entry>
  
</feed>
